import sys
sys.path.append("../")
from TSP_Utilities.Test_Inputs import mock_route_data as mock
from TSP_Utilities import tsp_utility_functions as tsp
from IHCV import ihcv as ih
from TwoOpt import two_opt as to

import unittest

class TestTwoOpt(unittest.TestCase):
    def setUp(self):
        self.test_city_1_nodes = mock.get_test_city_1_nodes()
        self.berlin52_nodes = mock.get_berlin52_nodes()
        self.tsp225_nodes = mock.get_tsp225_nodes()

        self.test_city_1_distance_matrix = mock.get_test_city_1_distance_matrix()
        self.berlin52_distance_matrix = mock.get_berlin52_distance_matrix()

    def test_two_opt_swap_move(self):
        route = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
        swapped_route = to.two_opt_swap_move(route, 1, 10)

        expected_swapped_route = [1, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 12, 13, 14, 15]

        self.assertEqual(expected_swapped_route, swapped_route)

    def test_compute_nearest_neighbours(self):
        nearest_neighbours = to.compute_nearest_neighbours(self.test_city_1_distance_matrix, 1, 5)

        expected_nearest_neighbours = [[2, 1, 5, 3, 6, 4], [5, 0, 6, 2, 3, 4], [0, 5, 1, 3, 6, 4], [5, 2, 0, 1, 4, 6], [3, 6, 5, 1, 2, 0], [3, 1, 2, 0, 6, 4], [1, 5, 3, 4, 0, 2]]

        self.assertEqual(expected_nearest_neighbours, nearest_neighbours)

    def test_nn_to_integrated_small(self):
        initial_solution = ([1, 3, 6, 4, 2, 7, 5, 1], 29.96)
        distance_matrix = self.test_city_1_distance_matrix
        nearest_neighbours = [[2, 1, 5, 3, 6, 4], [5, 0, 6, 2, 3, 4], [0, 5, 1, 3, 6, 4], [5, 2, 0, 1, 4, 6], [3, 6, 5, 1, 2, 0], [3, 1, 2, 0, 6, 4], [1, 5, 3, 4, 0, 2]]
        node_index_mapping = mock.get_test_city_1_node_index_mapping()
        generated_route, generated_distance = to.two_opt(initial_solution, distance_matrix, nearest_neighbours, node_index_mapping)

        expected_route = [1, 3, 6, 4, 5, 7, 2, 1]
        expected_distance = 23.63

        self.assertEqual(expected_route, generated_route)
        self.assertAlmostEqual(expected_distance, generated_distance)

    def test_ihcv_to_integrated_mid(self):
        initial_solution = ([1, 22, 31, 18, 3, 17, 21, 7, 2, 42, 30, 23, 20, 50, 16, 29, 47, 26, 28, 27, 13, 14, 52, 11, 12, 51, 33, 43, 10, 9, 8, 41, 19, 45, 32, 49, 37, 46, 48, 24, 5, 6, 25, 4, 15, 38, 40, 39, 36, 35, 34, 44, 1], 8105.78)
        distance_matrix = self.berlin52_distance_matrix
        nearest_neighbours = [[21, 48, 31, 34, 35, 33, 30, 43, 17, 38, 22, 36, 39, 19, 49, 44, 37, 15, 47, 23, 45, 2, 20, 4, 14, 18, 5, 29, 40, 3, 28, 24, 7, 16, 42, 9, 41, 8, 6, 11, 1, 27, 25, 50, 46, 26, 32, 12, 10, 13, 51], [6, 41, 29, 20, 16, 22, 30, 19, 17, 49, 28, 21, 2, 0, 15, 48, 31, 43, 34, 33, 35, 44, 38, 18, 36, 45, 39, 40, 37, 47, 23, 4, 7, 14, 5, 24, 3, 42, 9, 8, 46, 25, 27, 11, 26, 50, 12, 32, 13, 10, 51], [17, 18, 30, 16, 44, 21, 31, 40, 0, 48, 20, 7, 22, 35, 34, 38, 33, 39, 43, 19, 36, 37, 49, 8, 9, 29, 47, 14, 23, 4, 15, 5, 41, 45, 42, 3, 6, 1, 28, 24, 11, 32, 27, 50, 25, 26, 46, 12, 10, 13, 51], [5, 14, 4, 24, 23, 47, 37, 39, 36, 38, 45, 42, 33, 35, 34, 11, 43, 48, 31, 15, 0, 50, 44, 27, 21, 18, 49, 19, 25, 32, 7, 26, 17, 9, 22, 30, 40, 28, 2, 8, 46, 10, 20, 29, 12, 16, 13, 51, 41, 6, 1], [14, 23, 5, 47, 37, 39, 36, 3, 38, 24, 33, 35, 45, 34, 43, 48, 42, 31, 0, 15, 44, 21, 11, 49, 18, 19, 17, 30, 22, 7, 27, 40, 50, 2, 28, 9, 25, 20, 8, 26, 32, 29, 46, 16, 10, 12, 41, 6, 13, 1, 51], [4, 14, 23, 3, 47, 37, 39, 36, 24, 38, 45, 33, 35, 34, 43, 42, 48, 31, 0, 15, 11, 44, 21, 49, 18, 19, 27, 50, 17, 22, 30, 7, 40, 9, 28, 25, 2, 26, 32, 8, 20, 29, 46, 10, 16, 12, 41, 13, 51, 6, 1], [1, 41, 20, 29, 16, 22, 30, 19, 17, 49, 21, 2, 28, 0, 31, 48, 15, 43, 34, 33, 35, 44, 38, 18, 36, 45, 39, 40, 37, 47, 23, 7, 4, 14, 5, 24, 3, 42, 9, 8, 46, 25, 27, 11, 26, 50, 12, 32, 13, 10, 51], [40, 18, 9, 8, 44, 2, 31, 42, 17, 48, 38, 21, 35, 39, 0, 34, 37, 14, 33, 30, 36, 4, 23, 5, 47, 16, 3, 43, 20, 22, 45, 24, 19, 49, 32, 15, 29, 11, 28, 41, 50, 6, 27, 1, 25, 26, 46, 10, 12, 13, 51], [9, 7, 40, 18, 44, 42, 2, 31, 48, 39, 38, 14, 17, 32, 37, 35, 4, 34, 21, 5, 36, 0, 23, 33, 3, 47, 30, 16, 43, 24, 45, 20, 22, 19, 49, 15, 11, 50, 29, 28, 27, 41, 6, 25, 26, 1, 10, 46, 12, 51, 13], [8, 7, 40, 18, 42, 44, 31, 2, 14, 39, 38, 32, 37, 48, 4, 35, 5, 36, 3, 34, 23, 17, 47, 33, 21, 0, 30, 43, 24, 45, 16, 22, 20, 15, 19, 49, 11, 50, 29, 27, 28, 41, 25, 26, 10, 6, 1, 46, 12, 51, 13], [50, 11, 51, 26, 27, 12, 25, 13, 24, 3, 46, 32, 5, 4, 14, 23, 47, 45, 42, 37, 36, 39, 38, 33, 43, 15, 35, 34, 48, 31, 0, 28, 49, 44, 19, 9, 21, 18, 22, 7, 8, 40, 30, 17, 29, 2, 20, 16, 41, 6, 1], [27, 50, 24, 26, 3, 25, 5, 4, 10, 23, 14, 47, 45, 37, 36, 12, 39, 42, 38, 46, 33, 43, 34, 35, 15, 32, 48, 51, 31, 13, 0, 49, 28, 19, 21, 44, 22, 18, 9, 30, 17, 7, 40, 8, 29, 2, 20, 16, 41, 6, 1], [26, 13, 25, 51, 27, 46, 10, 11, 50, 24, 45, 3, 5, 47, 15, 23, 4, 14, 37, 28, 36, 43, 39, 33, 38, 34, 35, 49, 19, 42, 48, 0, 31, 22, 32, 21, 29, 44, 30, 17, 18, 20, 7, 9, 2, 40, 8, 41, 16, 1, 6], [12, 51, 46, 26, 25, 27, 10, 11, 50, 24, 45, 15, 28, 3, 5, 47, 23, 4, 14, 43, 36, 37, 49, 39, 33, 38, 34, 19, 35, 48, 0, 42, 22, 29, 31, 21, 32, 30, 44, 17, 20, 18, 2, 7, 40, 9, 41, 8, 1, 6, 16], [4, 5, 23, 37, 47, 39, 3, 36, 38, 24, 35, 33, 34, 45, 43, 42, 48, 31, 0, 44, 15, 21, 18, 11, 49, 19, 17, 30, 22, 7, 40, 9, 27, 50, 2, 28, 8, 32, 25, 20, 26, 29, 46, 16, 10, 12, 41, 6, 1, 13, 51], [49, 43, 45, 19, 28, 33, 34, 35, 36, 22, 0, 47, 38, 23, 48, 39, 37, 21, 4, 24, 5, 31, 14, 29, 30, 3, 17, 20, 44, 25, 27, 2, 11, 46, 18, 42, 26, 41, 40, 16, 7, 50, 6, 1, 12, 9, 8, 13, 32, 10, 51], [2, 20, 17, 30, 21, 41, 22, 18, 0, 31, 44, 40, 6, 48, 29, 1, 7, 19, 35, 49, 34, 33, 38, 43, 39, 36, 37, 15, 8, 9, 47, 23, 4, 14, 28, 45, 5, 42, 3, 24, 11, 32, 27, 25, 46, 50, 26, 12, 10, 13, 51], [30, 21, 2, 0, 31, 48, 20, 44, 22, 18, 35, 16, 34, 33, 38, 19, 43, 49, 40, 39, 36, 37, 7, 29, 15, 47, 23, 4, 14, 45, 5, 41, 28, 3, 42, 9, 6, 24, 8, 1, 11, 27, 25, 32, 50, 46, 26, 12, 10, 13, 51], [44, 40, 7, 2, 31, 17, 48, 21, 9, 0, 8, 35, 38, 34, 30, 39, 33, 37, 42, 36, 14, 4, 23, 47, 43, 16, 5, 20, 22, 3, 45, 19, 49, 15, 24, 29, 32, 28, 41, 11, 6, 1, 50, 27, 25, 26, 46, 10, 12, 13, 51], [49, 22, 15, 29, 43, 0, 28, 21, 30, 33, 34, 48, 35, 20, 45, 31, 17, 38, 36, 39, 47, 37, 23, 4, 14, 5, 2, 44, 24, 41, 3, 16, 18, 6, 1, 40, 7, 42, 25, 46, 27, 11, 26, 9, 8, 50, 12, 32, 13, 10, 51], [30, 22, 17, 29, 21, 16, 19, 0, 2, 41, 49, 31, 48, 6, 1, 43, 34, 35, 33, 44, 15, 38, 28, 18, 36, 39, 40, 37, 45, 47, 23, 4, 7, 14, 5, 3, 24, 42, 9, 8, 11, 25, 27, 46, 26, 50, 32, 12, 13, 10, 51], [0, 48, 31, 30, 17, 34, 35, 22, 33, 43, 38, 19, 44, 49, 2, 39, 20, 36, 37, 18, 15, 47, 23, 45, 4, 14, 29, 5, 40, 16, 7, 28, 3, 24, 42, 41, 9, 8, 6, 1, 11, 27, 25, 50, 46, 26, 32, 12, 10, 13, 51], [19, 49, 30, 21, 29, 0, 20, 17, 43, 48, 15, 31, 34, 33, 35, 28, 38, 36, 45, 2, 39, 37, 47, 44, 23, 41, 16, 4, 14, 18, 5, 6, 1, 24, 3, 40, 7, 42, 9, 25, 11, 8, 27, 46, 26, 50, 32, 12, 13, 10, 51], [47, 4, 37, 14, 5, 36, 39, 38, 3, 45, 33, 24, 35, 34, 43, 48, 31, 0, 15, 42, 21, 44, 49, 19, 11, 18, 22, 17, 30, 27, 28, 7, 40, 2, 50, 25, 9, 20, 29, 26, 8, 32, 46, 16, 12, 10, 41, 6, 1, 13, 51], [3, 5, 23, 47, 4, 14, 45, 37, 36, 39, 11, 38, 33, 43, 34, 35, 15, 27, 42, 48, 50, 31, 0, 25, 26, 49, 21, 19, 44, 28, 22, 46, 18, 30, 17, 32, 7, 12, 40, 10, 9, 2, 29, 20, 8, 13, 16, 51, 41, 6, 1], [26, 27, 46, 12, 11, 13, 24, 45, 50, 15, 3, 51, 47, 5, 23, 10, 4, 28, 14, 43, 36, 37, 39, 33, 38, 49, 34, 35, 19, 48, 0, 22, 42, 31, 21, 29, 30, 44, 17, 32, 20, 18, 2, 7, 40, 9, 41, 8, 16, 6, 1], [27, 25, 12, 11, 46, 13, 50, 10, 51, 24, 45, 3, 5, 47, 23, 4, 15, 14, 37, 36, 43, 39, 28, 33, 38, 34, 35, 49, 42, 19, 48, 0, 31, 21, 22, 32, 29, 44, 30, 17, 18, 20, 7, 9, 40, 2, 8, 16, 41, 6, 1], [26, 25, 11, 12, 24, 50, 46, 3, 10, 45, 5, 47, 23, 4, 13, 14, 51, 37, 36, 15, 39, 43, 33, 38, 34, 35, 28, 42, 49, 48, 19, 0, 31, 21, 32, 22, 44, 30, 29, 17, 18, 7, 9, 20, 40, 2, 8, 16, 41, 6, 1], [49, 15, 19, 29, 22, 43, 45, 33, 0, 34, 21, 35, 36, 30, 48, 38, 20, 47, 23, 39, 37, 31, 24, 4, 17, 46, 5, 14, 25, 41, 3, 27, 1, 6, 44, 2, 26, 11, 16, 18, 42, 40, 12, 7, 50, 13, 9, 8, 10, 51, 32], [22, 19, 49, 20, 28, 30, 41, 15, 21, 0, 43, 17, 6, 1, 48, 33, 34, 31, 35, 45, 16, 38, 2, 36, 39, 37, 47, 23, 44, 4, 14, 5, 18, 24, 3, 40, 7, 46, 25, 42, 27, 11, 9, 26, 8, 50, 12, 13, 32, 10, 51], [17, 21, 0, 20, 22, 31, 48, 2, 19, 49, 34, 35, 33, 43, 44, 16, 29, 38, 18, 39, 36, 15, 37, 40, 47, 45, 23, 4, 41, 14, 28, 7, 5, 6, 3, 1, 24, 42, 9, 8, 11, 27, 25, 46, 26, 50, 32, 12, 10, 13, 51], [48, 0, 21, 35, 34, 38, 33, 44, 17, 39, 30, 36, 43, 18, 37, 2, 47, 23, 22, 4, 14, 19, 5, 49, 40, 45, 15, 7, 20, 3, 42, 24, 16, 29, 9, 28, 8, 41, 11, 6, 27, 1, 32, 25, 50, 26, 46, 12, 10, 13, 51], [42, 50, 9, 3, 5, 14, 8, 11, 4, 24, 23, 37, 47, 39, 7, 36, 38, 44, 18, 40, 10, 35, 34, 33, 45, 31, 48, 27, 43, 0, 21, 26, 15, 17, 2, 25, 30, 49, 19, 22, 12, 51, 46, 28, 20, 16, 29, 13, 41, 6, 1], [34, 35, 38, 36, 43, 39, 48, 37, 47, 0, 23, 31, 45, 4, 14, 21, 5, 15, 49, 19, 3, 24, 22, 44, 30, 17, 18, 42, 2, 28, 20, 29, 40, 7, 11, 9, 16, 27, 8, 25, 50, 26, 41, 46, 32, 6, 1, 12, 10, 13, 51], [35, 33, 38, 48, 36, 39, 43, 37, 0, 31, 47, 23, 21, 4, 14, 45, 5, 15, 49, 44, 19, 30, 22, 17, 3, 24, 18, 2, 42, 20, 28, 40, 7, 29, 11, 9, 16, 8, 27, 25, 50, 41, 26, 46, 32, 6, 1, 12, 10, 13, 51], [34, 33, 38, 48, 39, 36, 43, 37, 31, 0, 47, 23, 4, 21, 14, 45, 5, 44, 15, 49, 3, 30, 17, 19, 22, 24, 18, 42, 2, 40, 20, 7, 28, 29, 9, 11, 16, 8, 27, 25, 50, 41, 26, 32, 46, 6, 1, 12, 10, 13, 51], [39, 37, 38, 47, 23, 33, 35, 34, 4, 14, 5, 43, 45, 48, 3, 31, 24, 0, 15, 21, 44, 49, 19, 42, 22, 30, 17, 18, 28, 2, 11, 40, 7, 20, 29, 27, 9, 25, 50, 8, 26, 16, 32, 46, 41, 12, 10, 6, 1, 13, 51], [39, 36, 23, 47, 4, 14, 38, 5, 33, 35, 34, 3, 45, 43, 48, 24, 31, 0, 21, 15, 42, 44, 49, 19, 18, 17, 30, 22, 11, 7, 40, 2, 28, 9, 27, 20, 50, 29, 8, 25, 26, 32, 16, 46, 41, 12, 10, 6, 1, 13, 51], [39, 35, 34, 36, 33, 37, 47, 23, 48, 4, 14, 43, 31, 5, 0, 45, 21, 3, 44, 24, 15, 49, 17, 30, 19, 18, 42, 22, 2, 40, 7, 20, 28, 29, 9, 11, 8, 16, 27, 50, 25, 32, 26, 46, 41, 6, 1, 12, 10, 13, 51], [37, 36, 38, 23, 47, 35, 4, 14, 33, 34, 5, 48, 43, 45, 31, 3, 0, 24, 21, 44, 15, 42, 49, 18, 17, 19, 30, 22, 40, 7, 2, 11, 28, 9, 20, 29, 27, 8, 50, 25, 16, 32, 26, 46, 41, 12, 10, 6, 1, 13, 51], [7, 18, 44, 8, 9, 2, 31, 17, 48, 21, 0, 42, 38, 35, 30, 39, 34, 33, 16, 37, 36, 14, 4, 23, 47, 5, 43, 20, 3, 22, 45, 19, 49, 24, 15, 32, 29, 41, 28, 11, 6, 1, 50, 27, 25, 26, 46, 10, 12, 13, 51], [6, 1, 20, 29, 16, 22, 30, 19, 17, 49, 21, 2, 0, 28, 48, 31, 15, 43, 34, 33, 35, 44, 38, 18, 36, 45, 39, 40, 37, 47, 23, 4, 7, 14, 5, 24, 3, 42, 9, 8, 46, 25, 27, 11, 26, 50, 12, 32, 13, 10, 51], [14, 3, 5, 4, 37, 39, 23, 9, 47, 38, 36, 44, 24, 7, 35, 32, 18, 34, 33, 8, 31, 48, 40, 45, 43, 0, 11, 21, 50, 17, 2, 15, 30, 49, 19, 27, 22, 20, 26, 25, 28, 16, 10, 29, 46, 12, 41, 6, 51, 1, 13], [33, 34, 35, 36, 45, 15, 38, 0, 48, 39, 47, 37, 49, 23, 19, 21, 31, 4, 14, 22, 5, 30, 24, 3, 17, 28, 44, 29, 20, 18, 2, 42, 40, 11, 7, 27, 25, 16, 9, 46, 26, 41, 50, 8, 6, 1, 32, 12, 10, 13, 51], [18, 31, 40, 7, 48, 2, 17, 21, 0, 35, 38, 34, 39, 33, 30, 37, 36, 14, 9, 4, 42, 23, 47, 43, 5, 8, 22, 3, 45, 20, 16, 19, 49, 15, 24, 29, 28, 32, 11, 41, 6, 50, 27, 1, 25, 26, 46, 10, 12, 13, 51], [47, 43, 36, 23, 15, 33, 37, 4, 24, 39, 5, 34, 38, 35, 14, 3, 48, 49, 0, 19, 31, 21, 28, 22, 11, 30, 27, 44, 42, 17, 25, 29, 18, 26, 20, 46, 2, 50, 40, 7, 9, 12, 16, 8, 32, 41, 10, 6, 13, 1, 51], [25, 26, 12, 27, 13, 11, 28, 15, 45, 24, 51, 43, 47, 49, 23, 3, 5, 4, 36, 19, 50, 37, 14, 33, 10, 39, 34, 38, 35, 22, 29, 0, 48, 21, 31, 30, 42, 17, 20, 44, 18, 2, 41, 32, 40, 7, 1, 6, 9, 16, 8], [23, 4, 37, 36, 5, 14, 39, 38, 45, 33, 3, 35, 34, 24, 43, 48, 31, 15, 0, 21, 42, 44, 49, 19, 11, 22, 30, 18, 17, 28, 27, 7, 40, 2, 50, 25, 20, 9, 29, 26, 8, 32, 46, 16, 12, 10, 41, 6, 1, 13, 51], [31, 0, 35, 34, 21, 33, 38, 43, 39, 36, 17, 37, 44, 30, 47, 23, 4, 22, 14, 19, 45, 49, 18, 5, 15, 2, 20, 3, 40, 24, 7, 42, 29, 28, 16, 9, 8, 11, 41, 27, 6, 25, 1, 50, 32, 26, 46, 12, 10, 13, 51], [19, 22, 15, 43, 28, 29, 0, 21, 33, 34, 30, 48, 35, 45, 38, 36, 31, 20, 17, 39, 47, 37, 23, 4, 14, 5, 24, 44, 2, 3, 41, 18, 16, 6, 1, 40, 42, 25, 7, 46, 27, 11, 26, 9, 8, 50, 12, 32, 13, 10, 51], [11, 10, 27, 24, 3, 26, 5, 32, 25, 14, 4, 42, 23, 47, 12, 37, 45, 36, 39, 51, 38, 33, 35, 34, 43, 46, 15, 48, 13, 31, 0, 44, 9, 49, 21, 18, 19, 7, 28, 8, 40, 22, 17, 30, 2, 29, 20, 16, 41, 6, 1], [12, 13, 10, 26, 27, 25, 46, 11, 50, 24, 3, 45, 5, 47, 23, 4, 14, 15, 37, 36, 39, 43, 28, 32, 38, 33, 42, 34, 35, 49, 19, 48, 0, 31, 21, 22, 44, 29, 30, 17, 18, 9, 7, 40, 20, 2, 8, 41, 16, 6, 1]]
        node_index_mapping = mock.get_berlin52_node_index_mapping()
        generated_route, generated_distance = to.two_opt(initial_solution, distance_matrix, nearest_neighbours, node_index_mapping)

        expected_route = [1, 22, 31, 18, 3, 17, 21, 42, 7, 2, 30, 23, 20, 50, 16, 29, 47, 26, 28, 27, 13, 14, 52, 11, 12, 51, 33, 43, 10, 9, 8, 41, 19, 45, 32, 49, 39, 40, 38, 15, 4, 25, 6, 5, 24, 48, 46, 37, 36, 35, 34, 44, 1]
        expected_distance = 8074.56

        self.assertEqual(generated_route, expected_route)
        self.assertAlmostEqual(expected_distance, generated_distance, delta=0.5)

    def test_nn_to_integrated_large(self):
        initial_solution = ([1, 200, 3, 198, 4, 197, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 203, 19, 18, 22, 21, 23, 24, 208, 25, 26, 34, 33, 35, 30, 202, 206, 31, 216, 219, 217, 77, 78, 79, 80, 81, 95, 209, 94, 93, 92, 91, 90, 87, 210, 84, 83, 82, 85, 86, 131, 211, 130, 222, 129, 128, 127, 126, 125, 124, 123, 122, 121, 175, 120, 185, 119, 118, 186, 187, 117, 116, 223, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 220, 104, 103, 102, 101, 100, 99, 98, 97, 96, 221, 28, 204, 29, 32, 38, 39, 40, 41, 42, 43, 44, 46, 194, 218, 193, 196, 192, 191, 199, 224, 133, 190, 225, 47, 2, 207, 49, 51, 57, 56, 55, 52, 53, 54, 70, 71, 72, 73, 74, 75, 76, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 50, 48, 45, 195, 205, 189, 27, 188, 184, 182, 173, 181, 174, 180, 179, 176, 177, 178, 172, 171, 170, 169, 168, 212, 214, 151, 150, 149, 152, 153, 154, 155, 156, 157, 144, 143, 201, 142, 141, 140, 139, 138, 137, 136, 183, 135, 134, 215, 164, 165, 166, 167, 213, 158, 163, 162, 161, 160, 159, 146, 147, 148, 145, 132, 88, 89, 37, 36, 1], 4829.0)
        distance_matrix = tsp.compute_distance_matrix(self.tsp225_nodes)
        nearest_neighbours = to.compute_nearest_neighbours(distance_matrix, 1, 5)
        node_index_mapping = mock.get_tsp225_node_index_mapping()
        generated_route, generated_distance = to.two_opt(initial_solution, distance_matrix, nearest_neighbours, node_index_mapping)

        expected_route = [1, 200, 198, 197, 195, 43, 42, 44, 46, 194, 218, 193, 45, 48, 196, 192, 191, 205, 189, 27, 188, 117, 187, 186, 119, 118, 116, 223, 115, 114, 113, 112, 111, 110, 109, 108, 107, 106, 67, 66, 65, 64, 63, 62, 61, 60, 58, 59, 2, 207, 47, 225, 190, 133, 199, 224, 50, 49, 51, 57, 56, 55, 52, 53, 54, 70, 68, 69, 71, 72, 73, 74, 75, 76, 31, 216, 219, 217, 77, 78, 79, 80, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 220, 105, 89, 88, 125, 124, 123, 122, 121, 175, 120, 185, 184, 182, 173, 181, 180, 179, 178, 177, 176, 174, 172, 171, 170, 169, 168, 150, 149, 148, 147, 146, 145, 143, 201, 142, 141, 140, 139, 138, 137, 136, 183, 135, 134, 215, 164, 165, 166, 167, 213, 158, 163, 162, 161, 160, 159, 144, 157, 156, 155, 154, 153, 152, 151, 212, 214, 126, 127, 128, 129, 132, 222, 130, 211, 131, 86, 85, 82, 83, 84, 210, 87, 90, 91, 92, 93, 94, 209, 221, 81, 28, 204, 34, 33, 35, 29, 30, 202, 206, 32, 37, 36, 26, 25, 208, 24, 23, 22, 21, 20, 203, 19, 18, 17, 16, 15, 14, 13, 12, 11, 38, 39, 40, 41, 10, 9, 8, 7, 6, 5, 4, 3, 1]
        expected_distance = 4123.82

        self.assertEqual(expected_route, generated_route)
        self.assertEqual(expected_distance, generated_distance)

    def test_run_ihcv_to(self):
        generated_route, generated_distance = to.run_two_opt_generic(ih.run_ihcv_tsp_lib_initial_solution, "berlin52.tsp", display_route=False)[0]

        expected_route = [1, 22, 31, 18, 3, 17, 21, 42, 7, 2, 30, 23, 20, 50, 16, 29, 47, 26, 28, 27, 13, 14, 52, 11, 12, 51, 33, 43, 10, 9, 8, 41, 19, 45, 32, 49, 39, 40, 38, 15, 4, 25, 6, 5, 24, 48, 46, 37, 36, 35, 34, 44, 1]
        expected_distance = 8074.56

        self.assertEqual(generated_route, expected_route)
        self.assertAlmostEqual(expected_distance, generated_distance, delta=0.5)

if __name__ == "__main__":
    unittest.main(warnings = "ignore")